# My Elixir Journey

```elixir
defmodule Hello do
  def world do
    IO.puts("Hello Elixir")
  end
end

Hello.world()
```

## My first Elixir Program

```elixir
a = 1
```

## Atom Data Type Example

```elixir
defmodule AtomExample do
  def print_message(atom) do
    case atom do
      :hello ->
        IO.puts("Hello, World!")

      :greeting ->
        IO.puts("Greetings!")

      :bye ->
        IO.puts("Goodbye!")

      _ ->
        IO.puts("Unknown atom")
    end
  end
end

# The module AtomExample is calling the print_message function which is using different Atoms to carry different strings 
AtomExample.print_message(:hello)
AtomExample.print_message(:greeting)
AtomExample.print_message(:bye)
AtomExample.print_message(:unknown)
```

## String Data Type

```elixir
name = "Godfrey"
```

```elixir
is_binary(name)
```

```elixir
msg = "Hello" <> name
```

```elixir
"Hello" <> name = msg
name
```

```elixir
<<head, rest::binary>> = name
head
```

```elixir
head == ?G
```

```elixir
<<"G", rest::binary>> = name
rest
```

```elixir
<<"Go", rest::binary>> = name
rest
```

## LISTS

```elixir
list = ["a", "b", "c"]
```

```elixir
Enum.at(list, 0)
```

```elixir
[first, second, third] = list
second
```

```elixir
[_, _, third] = ["a", "b", "c"]
third
```

```elixir
hd(list)
```

```elixir
tl(list)
```

```elixir
[h | t] = list
h
```

## Tuples

```elixir
{a, b} = {1, 2}
a
```

```elixir
{:reply, msg, state} = {:reply, "Godfrey found!", ["Godfrey", "Louis", "chiko"]}
state
```

```elixir
data = [a: 1, b: 2]
```
